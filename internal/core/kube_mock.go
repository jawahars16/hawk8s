// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package core

import (
	"context"
	"github.com/jawahars16/hawk8s/internal/kubeclient"
	"sync"
)

// Ensure, that KubeMock does implement Kube.
// If this is not the case, regenerate this file with moq.
var _ Kube = &KubeMock{}

// KubeMock is a mock implementation of Kube.
//
//	func TestSomethingThatUsesKube(t *testing.T) {
//
//		// make and configure a mocked Kube
//		mockedKube := &KubeMock{
//			GetNamespacesFunc: func(ctx context.Context) ([]string, error) {
//				panic("mock out the GetNamespaces method")
//			},
//			GetNodeFunc: func(ctx context.Context, name string) (kubeclient.Node, error) {
//				panic("mock out the GetNode method")
//			},
//			GetNodesFunc: func(ctx context.Context) ([]kubeclient.Node, error) {
//				panic("mock out the GetNodes method")
//			},
//			GetPodsFunc: func(ctx context.Context, node string) ([]kubeclient.Pod, error) {
//				panic("mock out the GetPods method")
//			},
//		}
//
//		// use mockedKube in code that requires Kube
//		// and then make assertions.
//
//	}
type KubeMock struct {
	// GetNamespacesFunc mocks the GetNamespaces method.
	GetNamespacesFunc func(ctx context.Context) ([]string, error)

	// GetNodeFunc mocks the GetNode method.
	GetNodeFunc func(ctx context.Context, name string) (kubeclient.Node, error)

	// GetNodesFunc mocks the GetNodes method.
	GetNodesFunc func(ctx context.Context) ([]kubeclient.Node, error)

	// GetPodsFunc mocks the GetPods method.
	GetPodsFunc func(ctx context.Context, node string) ([]kubeclient.Pod, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetNamespaces holds details about calls to the GetNamespaces method.
		GetNamespaces []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetNode holds details about calls to the GetNode method.
		GetNode []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetNodes holds details about calls to the GetNodes method.
		GetNodes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetPods holds details about calls to the GetPods method.
		GetPods []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Node is the node argument value.
			Node string
		}
	}
	lockGetNamespaces sync.RWMutex
	lockGetNode       sync.RWMutex
	lockGetNodes      sync.RWMutex
	lockGetPods       sync.RWMutex
}

// GetNamespaces calls GetNamespacesFunc.
func (mock *KubeMock) GetNamespaces(ctx context.Context) ([]string, error) {
	if mock.GetNamespacesFunc == nil {
		panic("KubeMock.GetNamespacesFunc: method is nil but Kube.GetNamespaces was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetNamespaces.Lock()
	mock.calls.GetNamespaces = append(mock.calls.GetNamespaces, callInfo)
	mock.lockGetNamespaces.Unlock()
	return mock.GetNamespacesFunc(ctx)
}

// GetNamespacesCalls gets all the calls that were made to GetNamespaces.
// Check the length with:
//
//	len(mockedKube.GetNamespacesCalls())
func (mock *KubeMock) GetNamespacesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetNamespaces.RLock()
	calls = mock.calls.GetNamespaces
	mock.lockGetNamespaces.RUnlock()
	return calls
}

// GetNode calls GetNodeFunc.
func (mock *KubeMock) GetNode(ctx context.Context, name string) (kubeclient.Node, error) {
	if mock.GetNodeFunc == nil {
		panic("KubeMock.GetNodeFunc: method is nil but Kube.GetNode was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetNode.Lock()
	mock.calls.GetNode = append(mock.calls.GetNode, callInfo)
	mock.lockGetNode.Unlock()
	return mock.GetNodeFunc(ctx, name)
}

// GetNodeCalls gets all the calls that were made to GetNode.
// Check the length with:
//
//	len(mockedKube.GetNodeCalls())
func (mock *KubeMock) GetNodeCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetNode.RLock()
	calls = mock.calls.GetNode
	mock.lockGetNode.RUnlock()
	return calls
}

// GetNodes calls GetNodesFunc.
func (mock *KubeMock) GetNodes(ctx context.Context) ([]kubeclient.Node, error) {
	if mock.GetNodesFunc == nil {
		panic("KubeMock.GetNodesFunc: method is nil but Kube.GetNodes was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetNodes.Lock()
	mock.calls.GetNodes = append(mock.calls.GetNodes, callInfo)
	mock.lockGetNodes.Unlock()
	return mock.GetNodesFunc(ctx)
}

// GetNodesCalls gets all the calls that were made to GetNodes.
// Check the length with:
//
//	len(mockedKube.GetNodesCalls())
func (mock *KubeMock) GetNodesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetNodes.RLock()
	calls = mock.calls.GetNodes
	mock.lockGetNodes.RUnlock()
	return calls
}

// GetPods calls GetPodsFunc.
func (mock *KubeMock) GetPods(ctx context.Context, node string) ([]kubeclient.Pod, error) {
	if mock.GetPodsFunc == nil {
		panic("KubeMock.GetPodsFunc: method is nil but Kube.GetPods was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Node string
	}{
		Ctx:  ctx,
		Node: node,
	}
	mock.lockGetPods.Lock()
	mock.calls.GetPods = append(mock.calls.GetPods, callInfo)
	mock.lockGetPods.Unlock()
	return mock.GetPodsFunc(ctx, node)
}

// GetPodsCalls gets all the calls that were made to GetPods.
// Check the length with:
//
//	len(mockedKube.GetPodsCalls())
func (mock *KubeMock) GetPodsCalls() []struct {
	Ctx  context.Context
	Node string
} {
	var calls []struct {
		Ctx  context.Context
		Node string
	}
	mock.lockGetPods.RLock()
	calls = mock.calls.GetPods
	mock.lockGetPods.RUnlock()
	return calls
}
