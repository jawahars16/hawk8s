package core

import (
	"context"
	"testing"

	"github.com/jawahars16/kubemon/internal/kubeclient"
	"github.com/stretchr/testify/assert"
)

func TestNodesService_GetViewModel(t *testing.T) {
	type fields struct {
		kube Kube
	}
	type args struct {
		ctx       context.Context
		namespace string
		mode      string
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *viewModel
	}{
		{
			name: "should return viewmodel with error if kube.GetNamespaces fails",
			fields: fields{
				kube: &KubeMock{
					GetNamespacesFunc: func(ctx context.Context) ([]namespace, error) {
						return nil, assert.AnError
					},
				},
			},
			args: args{
				ctx:       context.Background(),
				namespace: "all",
				mode:      "cpu",
			},
			want: &viewModel{
				Error: assert.AnError.Error(),
			},
		},
		{
			name: "should return viewmodel with error if kube.GetNodes fails",
			fields: fields{
				kube: &KubeMock{
					GetNamespacesFunc: func(ctx context.Context) ([]namespace, error) {
						return []namespace{}, nil
					},
					GetNodesFunc: func(ctx context.Context) ([]kubeclient.Node, error) {
						return nil, assert.AnError
					},
				},
			},
			args: args{
				ctx:       context.Background(),
				namespace: "all",
				mode:      "cpu",
			},
			want: &viewModel{
				Namespaces: []namespace{},
				Error:      assert.AnError.Error(),
			},
		},
		{
			name: "should return viewmodel with error if kube.GetPods fails",
			fields: fields{
				kube: &KubeMock{
					GetNamespacesFunc: func(ctx context.Context) ([]namespace, error) {
						return []namespace{}, nil
					},
					GetNodesFunc: func(ctx context.Context) ([]kubeclient.Node, error) {
						return []kubeclient.Node{}, nil
					},
					GetPodsFunc: func(ctx context.Context) ([]kubeclient.Pod, error) {
						return nil, assert.AnError
					},
				},
			},
			args: args{
				ctx:       context.Background(),
				namespace: "all",
				mode:      "cpu",
			},
			want: &viewModel{
				Namespaces: []namespace{},
				Error:      assert.AnError.Error(),
			},
		},
		{
			name: "should return viewmodel on success",
			fields: fields{
				kube: &KubeMock{
					GetNamespacesFunc: func(ctx context.Context) ([]namespace, error) {
						return []namespace{
							{Name: "default"},
							{Name: "kube-system"},
						}, nil
					},
					GetNodesFunc: func(ctx context.Context) ([]kubeclient.Node, error) {
						return []kubeclient.Node{
							{Name: "node1", Status: "Ready", AllocatableMemory: 100, AvailableCPU: 10},
							{Name: "node2", Status: "NotReady", AllocatableMemory: 50, AvailableCPU: 5},
						}, nil
					},
					GetPodsFunc: func(ctx context.Context) ([]kubeclient.Pod, error) {
						return []kubeclient.Pod{
							{Name: "pod1", Node: "node1"},
							{Name: "pod2", Node: "node2"},
						}, nil
					},
				},
			},
			args: args{
				ctx:       context.Background(),
				namespace: "all",
				mode:      "cpu",
			},
			want: &viewModel{
				Namespaces: []namespace{
					{Name: "default"},
					{Name: "kube-system"},
				},
				Nodes: []node{
					{
						Name: "node1",
						Pods: []pod{
							{
								Name: "pod1",
							},
						},
						Info: "CPU: 0.01m | 1 pods",
					},
					{
						Name: "node2",
						Pods: []pod{
							{
								Name: "pod2",
							},
						},
						Info: "CPU: 0.01m | 1 pods",
					},
				},
				Title:           "Showing CPU usage for all namespace",
				ActiveNamespace: "all",
				ActiveMode:      "cpu",
				Modes:           []string{"cpu", "memory"},
			},
		},
		{
			name: "should return viewmodel on success",
			fields: fields{
				kube: &KubeMock{
					GetNamespacesFunc: func(ctx context.Context) ([]namespace, error) {
						return []namespace{
							{Name: "default"},
							{Name: "kube-system"},
						}, nil
					},
					GetNodesFunc: func(ctx context.Context) ([]kubeclient.Node, error) {
						return []kubeclient.Node{
							{Name: "node1", Status: "Ready", AllocatableMemory: 100, AvailableCPU: 10},
							{Name: "node2", Status: "NotReady", AllocatableMemory: 50, AvailableCPU: 5},
						}, nil
					},
					GetPodsFunc: func(ctx context.Context) ([]kubeclient.Pod, error) {
						return []kubeclient.Pod{
							{Name: "pod1", Node: "node1"},
							{Name: "pod2", Node: "node2"},
						}, nil
					},
				},
			},
			args: args{
				ctx:       context.Background(),
				namespace: "all",
				mode:      "memory",
			},
			want: &viewModel{
				Namespaces: []namespace{
					{Name: "default"},
					{Name: "kube-system"},
				},
				Nodes: []node{
					{
						Name: "node1",
						Pods: []pod{
							{
								Name: "pod1",
							},
						},
						Info: "Mem: 100 B | 1 pods",
					},
					{
						Name: "node2",
						Pods: []pod{
							{
								Name:  "pod2",
								Size:  "0.5%",
								Color: "#26A69A",
							},
						},
						Info: "Mem: 50 B | 1 pods",
					},
				},
				Title:           "Showing Memory usage for all namespace",
				ActiveNamespace: "all",
				ActiveMode:      "memory",
				Modes:           []string{"cpu", "memory"},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			n := &Service{
				kube: tt.fields.kube,
			}
			got := n.GetViewModel(tt.args.ctx, tt.args.namespace, tt.args.mode)
			assert.Equal(t, tt.want, got)
			// if got := n.GetViewModel(tt.args.ctx, tt.args.namespace, tt.args.mode); !reflect.DeepEqual(got, tt.want) {
			// 	t.Errorf("Failed")
			// 	t.Log("got: ", got)
			// 	t.Log("want: ", tt.want)
			// }
		})
	}
}
